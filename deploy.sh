#!/bin/bash

# Death Star Infrastructure - Deploy Script
# Script master que automatiza todo o processo de build, push e deploy

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}"
echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó "
echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó"
echo "‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù"
echo "‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó"
echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù"
echo -e "${NC}"
echo -e "${GREEN}üöÄ Infrastructure Deployment Script${NC}"
echo "========================================"

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar pr√©-requisitos
check_prerequisites() {
    log "Verificando pr√©-requisitos..."
    
    # Verificar se Docker est√° rodando
    if ! docker info > /dev/null 2>&1; then
        error "Docker n√£o est√° rodando. Por favor, inicie o Docker Desktop."
        exit 1
    fi
    
    # Verificar se gcloud est√° autenticado
    if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
        error "Nenhuma conta ativa no gcloud. Execute: gcloud auth login"
        exit 1
    fi
    
    # Verificar se terraform est√° instalado
    if ! command -v terraform &> /dev/null; then
        error "Terraform n√£o est√° instalado."
        exit 1
    fi
    
    log "‚úÖ Todos os pr√©-requisitos est√£o OK"
}

# Fun√ß√£o principal de deploy
deploy() {
    local mode=${1:-"full"}
    
    case $mode in
        "build-only")
            log "üî® Executando apenas build e push das imagens..."
            ./build-and-push.sh
            ;;
        "terraform-only")
            log "üèóÔ∏è Executando apenas Terraform apply..."
            terraform plan
            read -p "Confirma a aplica√ß√£o das mudan√ßas? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                terraform apply -auto-approve
            else
                warn "Deploy cancelado pelo usu√°rio."
                exit 0
            fi
            ;;
        "full")
            log "üöÄ Executando deploy completo..."
            
            # 1. Atualizar configura√ß√µes do Terraform
            log "1/4 Atualizando configura√ß√µes do Terraform..."
            ./update-terraform-images.sh
            
            # 2. Build e push das imagens
            log "2/4 Executando build e push das imagens..."
            ./build-and-push.sh
            
            # 3. Terraform plan
            log "3/4 Executando terraform plan..."
            terraform plan
            
            # 4. Confirma√ß√£o e apply
            log "4/4 Pronto para aplicar mudan√ßas..."
            echo ""
            warn "‚ö†Ô∏è  As mudan√ßas acima ser√£o aplicadas na infraestrutura."
            read -p "Confirma a aplica√ß√£o? (y/N): " -n 1 -r
            echo ""
            
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                log "Aplicando mudan√ßas..."
                terraform apply -auto-approve
                
                # Mostrar URLs dos servi√ßos
                log "‚úÖ Deploy conclu√≠do com sucesso!"
                echo ""
                log "üåê URLs dos servi√ßos:"
                gcloud run services list --region=us-central1 --format="table(metadata.name,status.url)"
                
            else
                warn "Deploy cancelado pelo usu√°rio."
                exit 0
            fi
            ;;
        *)
            error "Modo inv√°lido: $mode"
            echo "Modos dispon√≠veis: full, build-only, terraform-only"
            exit 1
            ;;
    esac
}

# Fun√ß√£o de ajuda
show_help() {
    echo -e "${BLUE}Death Star Infrastructure Deploy Script${NC}"
    echo ""
    echo "Uso: $0 [MODO]"
    echo ""
    echo "Modos dispon√≠veis:"
    echo "  full           Deploy completo (padr√£o) - build + terraform"
    echo "  build-only     Apenas build e push das imagens"
    echo "  terraform-only Apenas terraform apply"
    echo "  help           Mostra esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  $0              # Deploy completo"
    echo "  $0 full         # Deploy completo"
    echo "  $0 build-only   # Apenas build das imagens"
    echo "  $0 terraform-only # Apenas terraform apply"
}

# Parse de argumentos
case ${1:-"full"} in
    "help"|"-h"|"--help")
        show_help
        exit 0
        ;;
    *)
        check_prerequisites
        deploy $1
        ;;
esac

echo ""
echo -e "${GREEN}üéâ Script executado com sucesso!${NC}"